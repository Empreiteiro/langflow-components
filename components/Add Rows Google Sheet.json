{"data":{"edges":[],"nodes":[{"data":{"id":"Add Rows Google Sheet-URigq","node":{"base_classes":["Data"],"beta":false,"conditional_paths":[],"custom_fields":{},"description":"Appends JSON rows to the next available line in a Google Sheet.","display_name":"Add Rows Google Sheet","documentation":"","edited":true,"field_order":["payload","credentials_file","spreadsheet_id","sheet_name"],"frozen":false,"icon":"table","legacy":false,"lf_version":"1.3.1","metadata":{},"minimized":false,"output_types":[],"outputs":[{"allows_loop":false,"cache":true,"display_name":"Result","hidden":null,"method":"append_data","name":"result","options":null,"required_inputs":null,"selected":"Data","tool_mode":true,"types":["Data"],"value":"__UNDEFINED__"}],"pinned":false,"template":{"_type":"Component","code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from langflow.custom import Component\r\nfrom langflow.io import DataInput, StrInput, FileInput, Output\r\nfrom langflow.schema import Data\r\nfrom google.oauth2 import service_account\r\nfrom googleapiclient.discovery import build\r\nimport json\r\n\r\nclass AppendToGoogleSheet(Component):\r\n    display_name = \"Add Rows Google Sheet\"\r\n    description = \"Appends JSON rows to the next available line in a Google Sheet.\"\r\n    icon = \"table\"\r\n    name = \"Add Rows Google Sheet\"\r\n\r\n    inputs = [\r\n        DataInput(\r\n            name=\"payload\",\r\n            display_name=\"Payload\",\r\n            info=\"A dictionary, list of dictionaries, or dictionary with a 'results' list.\",\r\n            required=True\r\n        ),\r\n        FileInput(\r\n            name=\"credentials_file\",\r\n            display_name=\"Google Credentials File\",\r\n            file_types=[\"json\"],\r\n            required=True,\r\n        ),\r\n        StrInput(\r\n            name=\"spreadsheet_id\",\r\n            display_name=\"Spreadsheet ID\",\r\n            info=\"The ID of the spreadsheet (from the URL).\",\r\n            required=True,\r\n        ),\r\n        StrInput(\r\n            name=\"sheet_name\",\r\n            display_name=\"Sheet Name\",\r\n            info=\"The tab name where data should be appended.\",\r\n            required=True,\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(name=\"result\", display_name=\"Result\", method=\"append_data\")\r\n    ]\r\n\r\n    def append_data(self) -> Data:\r\n        try:\r\n            if not isinstance(self.credentials_file, str):\r\n                raise ValueError(\"Expected credentials_file to be a file path string.\")\r\n\r\n            with open(self.credentials_file, \"r\", encoding=\"utf-8\") as f:\r\n                credentials_dict = json.load(f)\r\n\r\n            credentials = service_account.Credentials.from_service_account_info(\r\n                credentials_dict,\r\n                scopes=[\"https://www.googleapis.com/auth/spreadsheets\"]\r\n            )\r\n\r\n            service = build(\"sheets\", \"v4\", credentials=credentials)\r\n            sheet = service.spreadsheets()\r\n\r\n            metadata = sheet.get(spreadsheetId=self.spreadsheet_id).execute()\r\n            sheet_titles = [s[\"properties\"][\"title\"] for s in metadata.get(\"sheets\", [])]\r\n            if self.sheet_name not in sheet_titles:\r\n                raise ValueError(f\"Sheet '{self.sheet_name}' not found. Available: {sheet_titles}\")\r\n\r\n            header_range = f\"{self.sheet_name}!1:1\"\r\n            header_result = sheet.values().get(\r\n                spreadsheetId=self.spreadsheet_id,\r\n                range=header_range\r\n            ).execute()\r\n            headers = header_result.get(\"values\", [[]])[0]\r\n\r\n            if not headers:\r\n                raise ValueError(\"Sheet must have headers in the first row.\")\r\n\r\n            row_check_range = f\"{self.sheet_name}!A:A\"\r\n            result = sheet.values().get(\r\n                spreadsheetId=self.spreadsheet_id,\r\n                range=row_check_range\r\n            ).execute()\r\n            current_rows = result.get(\"values\", [])\r\n            next_row_index = len(current_rows) + 1\r\n\r\n            # Extract raw content from Data wrapper if needed\r\n            raw_payload = self.payload.data if isinstance(self.payload, Data) else self.payload\r\n\r\n            if isinstance(raw_payload, str):\r\n                try:\r\n                    raw_payload = json.loads(raw_payload)\r\n                except Exception as e:\r\n                    raise ValueError(f\"Payload string could not be parsed as JSON: {str(e)}\")\r\n\r\n            if isinstance(raw_payload, dict):\r\n                if \"results\" in raw_payload and isinstance(raw_payload[\"results\"], list):\r\n                    rows = raw_payload[\"results\"]\r\n                else:\r\n                    rows = [raw_payload]\r\n            elif isinstance(raw_payload, list) and all(isinstance(r, dict) for r in raw_payload):\r\n                rows = raw_payload\r\n            else:\r\n                raise ValueError(f\"Payload could not be recognized. Type: {type(raw_payload)}, value: {str(raw_payload)[:300]}\")\r\n\r\n            values_to_append = [\r\n                [item.get(col, \"\") for col in headers] for item in rows\r\n            ]\r\n\r\n            sheet.values().append(\r\n                spreadsheetId=self.spreadsheet_id,\r\n                range=self.sheet_name,\r\n                valueInputOption=\"RAW\",\r\n                insertDataOption=\"INSERT_ROWS\",\r\n                body={\"values\": values_to_append}\r\n            ).execute()\r\n\r\n            self.status = f\"Appended {len(values_to_append)} rows\"\r\n            return Data(data={\r\n                \"status\": \"success\",\r\n                \"rows_appended\": len(values_to_append),\r\n                \"next_row_start\": next_row_index,\r\n                \"headers\": headers\r\n            })\r\n\r\n        except Exception as e:\r\n            error_msg = f\"Error appending data: {str(e)}\"\r\n            self.status = error_msg\r\n            self.log(error_msg)\r\n            return Data(data={\"status\": \"error\", \"message\": error_msg})\r\n"},"credentials_file":{"_input_type":"FileInput","advanced":false,"display_name":"Google Credentials File","dynamic":false,"fileTypes":["json"],"file_path":"","info":"","list":false,"list_add_label":"Add More","load_from_db":false,"name":"credentials_file","placeholder":"","required":true,"show":true,"temp_file":false,"title_case":false,"trace_as_metadata":true,"type":"file","value":""},"payload":{"_input_type":"DataInput","advanced":false,"display_name":"Payload","dynamic":false,"info":"A dictionary, list of dictionaries, or dictionary with a 'results' list.","input_types":["Data"],"list":false,"list_add_label":"Add More","name":"payload","placeholder":"","required":true,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"other","value":""},"sheet_name":{"_input_type":"StrInput","advanced":false,"display_name":"Sheet Name","dynamic":false,"info":"The tab name where data should be appended.","list":false,"list_add_label":"Add More","load_from_db":false,"name":"sheet_name","placeholder":"","required":true,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"str","value":"Classification"},"spreadsheet_id":{"_input_type":"StrInput","advanced":false,"display_name":"Spreadsheet ID","dynamic":false,"info":"The ID of the spreadsheet (from the URL).","list":false,"list_add_label":"Add More","load_from_db":false,"name":"spreadsheet_id","placeholder":"","required":true,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"str","value":"1wO7e-FrdvAtkSEKIgWSSLX4Wyp2nufiN4Rh_KvoZffw"}},"tool_mode":false,"official":false},"showNode":true,"type":"Add Rows Google Sheet"},"id":"Add Rows Google Sheet-URigq","position":{"x":0,"y":0},"type":"genericNode"}],"viewport":{"x":1,"y":1,"zoom":1}},"description":"Appends JSON rows to the next available line in a Google Sheet.","name":"Add Rows Google Sheet","id":"Add Rows Google Sheet-URigq","is_component":true,"last_tested_version":"1.3.4"}